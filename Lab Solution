qwiklab link:https://www.qwiklabs.com/focuses/14744?parent=catalog

********** Provisioning the environment **********
gcloud auth list
gcloud config list project
gcloud config set project \
$(gcloud projects list --format='value(PROJECT_ID)' \
--filter='qwiklabs-gcp')
gcloud config set run/region us-central1
gcloud config set run/platform managed
git clone https://github.com/rosera/pet-theory.git && cd pet-theory/lab07
export PROJECT_ID=$GOOGLE_CLOUD_PROJECT

********** Task 1 **********
cd ~/pet-theory/lab07/unit-api-billing
gcloud builds submit --tag gcr.io/${PROJECT_ID}/billing-staging-api:0.1
gcloud run deploy public-billing-service --image gcr.io/${PROJECT_ID}/billing-staging-api:0.1 
***(when prompted, press y for unauthenticated access)***

gcloud run services list 
***click on endpoint URL to see if service responds***

********** Task 2 **********
cd ~/pet-theory/lab07/staging-frontend-billing
gcloud builds submit --tag gcr.io/${PROJECT_ID}/frontend-staging:0.1
gcloud run deploy frontend-staging-service --image gcr.io/${PROJECT_ID}/frontend-staging:0.1
***(when prompted, press y for unauthenticated access)***

gcloud run services list 
***click on endpoint URL to see if frontend-staging-service responds***

********** Task 3 **********
gcloud run services delete public-billing-service
cd ~/pet-theory/lab07/staging-api-billing
gcloud builds submit --tag gcr.io/${PROJECT_ID}/billing-staging-api:0.2
gcloud run deploy private-billing-service --image gcr.io/${PROJECT_ID}/billing-staging-api:0.2
***(when prompted, press n for authenticated access only or apply the --no-allow-unauthenticated flag in the above command)***

export BILLING_SERVICE=private-billing-service
BILLING_URL=$(gcloud run services describe $BILLING_SERVICE \
  --platform managed \
  --region us-central1 \
  --format "value(status.url)")
  
curl -X get -H "Authorization: Bearer $(gcloud auth print-identity-token)" $BILLING_URL

********** Task 4 **********
gcloud iam service-accounts create billing-service-sa --display-name "Billing Service Cloud Run"

********** Task 5 **********
cd ~/pet-theory/lab07/prod-api-billing
gcloud builds submit --tag gcr.io/${PROJECT_ID}/billing-prod-api:0.1
gcloud run deploy billing-prod-service --image gcr.io/${PROJECT_ID}/billing-prod-api:0.1 --service-account=billing-service-sa
***(when prompted, press n for authenticated access only or apply the --no-allow-unauthenticated flag in the above command)***

export PROD_BILLING_SERVICE=billing-prod-service

PROD_BILLING_URL=$(gcloud run services \
  describe $PROD_BILLING_SERVICE \
  --platform managed \
  --region us-central1 \
  --format "value(status.url)")

curl -X get -H "Authorization: Bearer \
  $(gcloud auth print-identity-token)" \
  $PROD_BILLING_URL
  
********** Task 6 **********
gcloud iam service-accounts create frontend-service-sa --display-name "Billing Service Cloud Run Invoker"

gcloud iam service-accounts add-iam-policy-binding frontend-service-sa@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com \
  --member=serviceAccount:frontend-service-sa@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com \
  --role=roles/run.invoker
  
================== SIDE NOTE (Able to use the below command after service has been created)======================
gcloud run services add-iam-policy-binding frontend-prod-service \
  --member=serviceAccount:frontend-service-sa@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com \
  --role=roles/run.invoker \
  --region us-central1 \
  --platform managed


***If the above command for task 6, does not work, fall back on using the GCP console***

Go to Navigation menu > IAM & Admin > Service accounts
Click on Create Service account.
Give name as: frontend-service-sa
Give the Role: Cloud Run Invoker

Accept all other default values and click on Done.
 

********** Task 7 **********
cd ~/pet-theory/lab07/prod-frontend-billing
gcloud builds submit --tag gcr.io/${PROJECT_ID}/frontend-prod:0.1

gcloud run deploy frontend-prod-service --image gcr.io/${PROJECT_ID}/frontend-prod:0.1 --service-account=frontend-service-sa
***(when prompted, press y for unauthenticated access)***

gcloud run services list
***click on endpoint URL to see if service responds***
